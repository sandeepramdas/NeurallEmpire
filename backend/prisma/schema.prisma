// ==================== NEURALLEMPIRE MULTI-COMPANY SCHEMA ====================
// Version 3.0 - Enterprise Multi-Company Accounting SaaS Architecture
// Complete schema with RBAC, Multi-Company Support, Dynamic Menus & Accounting Module
// Created: 2025-10-03
// Author: System Architect AI

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto(map: "pgcrypto")]
}

// ==================== PLATFORM ADMINISTRATION ====================

model PlatformAdmin {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  role         AdminRole @default(SUPPORT)
  permissions  Json      @default("[]") // Array of permission IDs

  // Security
  mfaEnabled   Boolean   @default(true)
  mfaSecret    String?
  lastLoginAt  DateTime?
  lastLoginIp  String?

  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  auditLogs    AuditLog[]
  adminActions AdminAction[]

  @@index([email])
  @@index([isActive])
  @@index([lastLoginAt])
  @@map("platform_admins")
}

model AdminAction {
  id          String    @id @default(cuid())
  adminId     String
  action      String    // e.g., "DEACTIVATE_ORG", "MODIFY_SUBSCRIPTION"
  targetType  String    // "ORGANIZATION", "USER", "AGENT", "COMPANY"
  targetId    String
  reason      String?
  metadata    Json?     // Additional action details

  admin       PlatformAdmin @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@index([targetType, targetId])
  @@index([adminId])
  @@index([createdAt])
  @@map("admin_actions")
}

// ==================== ORGANIZATION MANAGEMENT ====================

model Organization {
  id               String       @id @default(cuid())
  uuid             String       @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // External API ID
  name             String
  slug             String       @unique
  domain           String?      @unique
  logo             String?
  description      String?
  industry         String?
  size             String?

  // Status Management
  status           OrgStatus    @default(TRIAL)
  statusReason     String?
  statusChangedAt  DateTime     @default(now())
  statusChangedBy  String?

  // Subdomain Management
  subdomainEnabled Boolean      @default(true)
  subdomainStatus  SubdomainStatus @default(PENDING)
  subdomainVerifiedAt DateTime?
  customDomain     String?      @unique
  customDomainVerified Boolean  @default(false)
  sslCertificateStatus SSLStatus @default(PENDING)
  sslCertificateExpiry DateTime?

  // Subscription & Billing
  planType         PlanType     @default(TRIAL)
  billingCycle     BillingCycle @default(MONTHLY)
  subscriptionId   String?      @unique
  billingEmail     String?

  // Trial Management
  trialEndsAt      DateTime?
  trialExtended    Boolean      @default(false)

  // Resource Limits (Plan-based)
  maxUsers         Int          @default(5)
  maxCompanies     Int          @default(1)    // NEW: Multi-company limit
  maxAgents        Int          @default(10)
  maxWorkflows     Int          @default(20)
  maxApiCalls      Int          @default(10000)
  storageLimit     BigInt       @default(5368709120) // 5GB

  // Usage Tracking
  currentUsers     Int          @default(0)
  currentCompanies Int          @default(0)    // NEW
  currentAgents    Int          @default(0)
  currentWorkflows Int          @default(0)
  apiCallsThisMonth Int         @default(0)
  storageUsed      BigInt       @default(0)

  // Security & SSO
  ssoEnabled       Boolean      @default(false)
  ssoProvider      SSOProvider?
  ssoConfig        Json?
  samlMetadata     String?
  allowedDomains   String[]     @default([])

  // Compliance
  dataRetention    Int          @default(90) // days
  ipWhitelist      String[]     @default([])

  // Onboarding
  onboardingCompleted Boolean   @default(false)
  onboardingStep   Int          @default(0)
  setupWizardCompleted Boolean  @default(false)
  firstAgentCreated Boolean     @default(false)

  // N-Level Organization Hierarchy (V2)
  parentId         String?
  parent           Organization? @relation("OrganizationHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children         Organization[] @relation("OrganizationHierarchy")
  path             String?      // Materialized path: 'root.child.grandchild'
  level            Int          @default(0) // 0 = root organization
  ancestorIds      String[]     @default([]) // Array of all ancestor IDs for fast permission checks
  hierarchyPosition Int?        // Position among siblings for ordering
  type             String       @default("division") // 'holding', 'subsidiary', 'division', 'department', 'team', 'custom'

  // Metadata
  verifiedAt       DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?

  // Relations
  users            User[]
  members          UserOrganization[]  @relation("OrganizationMembers") // NEW: Multi-org membership
  invites          OrganizationInvite[] // NEW: Organization invites
  companies        Company[]                   // NEW: Multi-company support
  roles            Role[]                      // NEW: RBAC
  agents           Agent[]
  workflows        AgentWorkflow[]
  workflowTemplates WorkflowTemplate[]
  interactions     AgentInteraction[]
  subscriptions    Subscription[]
  invoices         Invoice[]
  apiKeys          ApiKey[]
  webhooks         Webhook[]
  auditLogs        AuditLog[]
  agentTemplates   AgentTemplate[]
  usageMetrics     UsageMetric[]
  notifications    Notification[]
  subdomainRecords SubdomainRecord[]
  customDomains    CustomDomain[]  // NEW: Custom domain support (Enterprise)
  oauthConfigs     OAuthConfig[]
  socialAccounts   SocialAccount[]
  agentSwarms      AgentSwarm[]
  payments         Payment[]
  entityDefinitions EntityDefinition[] @relation("EntityDefinitions") // V2: Dynamic entities
  systemSettings   SystemSetting[]  @relation("OrganizationSettings") // NEW: System settings
  files            File[]          @relation("OrganizationFiles") // NEW: File storage
  emailNotifications EmailNotification[] @relation("OrgEmails") // NEW: Email notifications
  analyticsEvents  AnalyticsEvent[] @relation("OrgEvents") // NEW: Analytics events
  patientDietPlans PatientDietPlan[] @relation("OrgDietPlans") // NEW: Patient diet plans
  aiModels         AIModelConfig[] @relation("OrgAIModels") // NEW: AI model configurations

  @@index([status])
  @@index([planType])
  @@index([slug])
  @@index([subdomainStatus])
  @@index([createdAt])
  @@index([parentId])
  @@index([deletedAt])
  @@index([updatedAt])
  @@map("organizations")
}

// ==================== ðŸš€ NEW: MULTI-COMPANY SUPPORT ====================

model Company {
  id              String   @id @default(cuid())
  organizationId  String

  // Company Details
  companyCode     String   // Unique within organization (e.g., "ACME001")
  name            String
  legalName       String?
  taxId           String?
  registrationNumber String?

  // Accounting Settings
  currencyCode    String   @default("USD")
  fiscalYearStart Int      @default(1) // Month (1-12)
  fiscalYearEnd   Int      @default(12)
  accountingMethod AccountingMethod @default(ACCRUAL)

  // Address
  addressLine1    String?
  addressLine2    String?
  city            String?
  state           String?
  country         String   @default("US")
  zipCode         String?

  // Contact
  phone           String?
  email           String?
  website         String?

  // Settings
  settings        Json     @default("{}")
  preferences     Json     @default("{}")

  // Status
  status          CompanyStatus @default(ACTIVE)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userAccess      UserCompanyAccess[]  // NEW: Many-to-many with users
  accounts        Account[]            // Accounting: Chart of Accounts
  transactions    Transaction[]        // Accounting: Transactions
  customers       Customer[]           // Accounting: Customers
  vendors         Vendor[]             // Accounting: Vendors
  patientDietPlans PatientDietPlan[]   // Healthcare: Patient diet plans

  @@unique([organizationId, companyCode])
  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("companies")
}

// ==================== ðŸš€ NEW: USER-COMPANY ACCESS (MANY-TO-MANY) ====================

model UserCompanyAccess {
  id              String   @id @default(cuid())
  userId          String
  companyId       String
  roleId          String?

  // Access Control
  permissions     Json     @default("[]") // Override permissions for this company
  isDefault       Boolean  @default(false) // Default company for user

  // Activity Tracking
  lastAccessedAt  DateTime?
  accessCount     Int      @default(0)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role            Role?    @relation(fields: [roleId], references: [id], onDelete: SetNull)

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@index([lastAccessedAt])
  @@map("user_company_access")
}

// ==================== ðŸš€ NEW: RBAC - ROLES & PERMISSIONS ====================

model Role {
  id              String   @id @default(cuid())
  organizationId  String

  // Role Details
  name            String
  code            String   // Unique code like "ACCOUNTANT", "MANAGER"
  description     String?
  isSystem        Boolean  @default(false) // System roles can't be deleted
  isDefault       Boolean  @default(false) // Default role for new users

  // Permissions
  permissions     Json     @default("[]") // Array of permission codes

  // Priority (for role hierarchy)
  priority        Int      @default(0)    // Higher = more permissions

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userAccess      UserCompanyAccess[]

  @@unique([organizationId, code])
  @@index([organizationId])
  @@index([isSystem])
  @@map("roles")
}

model Permission {
  id              String   @id @default(cuid())

  // Permission Structure (module:action:resource)
  module          String   // e.g., "accounting", "agents", "settings", "company"
  action          String   // e.g., "create", "read", "update", "delete", "approve"
  resource        String   // e.g., "transactions", "agents", "users", "reports"

  // Permission Code (unique identifier)
  code            String   @unique // e.g., "accounting:create:transactions"

  // Details
  description     String?
  isAdminOnly     Boolean  @default(false)
  category        String?  // Group permissions by category

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([module, action, resource])
  @@index([module])
  @@index([category])
  @@map("permissions")
}

// ==================== ðŸš€ NEW: DYNAMIC MENU SYSTEM ====================

model MenuItem {
  id              String   @id @default(cuid())
  parentId        String?

  // Menu Details
  name            String   @unique
  label           String   // Display label
  icon            String?  // Icon name/class
  route           String?  // Frontend route
  component       String?  // Component name

  // Permissions
  permissionsRequired Json @default("[]") // Array of permission codes required
  rolesRequired   Json     @default("[]") // Array of role codes required

  // Display
  orderIndex      Int      @default(0)
  isActive        Boolean  @default(true)
  showInSidebar   Boolean  @default(true)
  isSeparator     Boolean  @default(false)
  badge           String?  // Badge text (e.g., "New", "Beta")
  badgeColor      String?

  // Module/Category
  module          String?  // Which module this belongs to

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  parent          MenuItem? @relation("MenuHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        MenuItem[] @relation("MenuHierarchy")

  @@index([parentId])
  @@index([orderIndex])
  @@index([module])
  @@index([isActive])
  @@map("menu_items")
}

// ==================== ðŸš€ NEW: USER PREFERENCES ====================

model UserPreference {
  id              String   @id @default(cuid())
  userId          String   @unique

  // Defaults
  defaultCompanyId String?
  defaultDashboard String?  // Default dashboard view

  // UI Preferences
  theme           String   @default("light") // light, dark, auto
  language        String   @default("en")
  timezone        String   @default("UTC")
  dateFormat      String   @default("MM/DD/YYYY")
  timeFormat      String   @default("12h") // 12h, 24h
  numberFormat    String   @default("en-US")

  // Dashboard
  dashboardLayout Json?    // Custom dashboard layout
  widgets         Json?    // Enabled widgets

  // Notifications
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  notificationTypes  Json    @default("[]") // Which notification types to receive

  // Additional Preferences
  sidebarCollapsed Boolean  @default(false)
  tablePageSize    Int      @default(25)
  preferences      Json     @default("{}")

  // Metadata
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// ==================== USER & AUTH ====================

model User {
  id             String   @id @default(cuid())
  uuid           String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // External API ID
  email          String   @unique
  passwordHash   String?  // Optional for OAuth-only users
  firstName      String?
  lastName       String?
  avatar         String?
  phone          String?
  timezone       String   @default("UTC")

  // Organization & Role
  organizationId String
  role           UserRole @default(MEMBER) // Organization-level role
  department     String?
  title          String?

  // Legacy Permissions (deprecated, use RBAC instead)
  permissions    Json?
  canCreateAgents Boolean @default(true)
  canManageWorkflows Boolean @default(true)
  canViewAnalytics Boolean @default(true)

  // Super Admin (platform-wide access)
  isSuperAdmin   Boolean  @default(false) // NEW: Super admin flag

  // Status & Security
  status         UserStatus @default(PENDING)
  statusReason   String?
  emailVerified  Boolean    @default(false)
  phoneVerified  Boolean    @default(false)
  mfaEnabled     Boolean    @default(false)
  mfaSecret      String?

  // Activity
  lastLoginAt    DateTime?
  lastLoginIp    String?
  loginCount     Int       @default(0)
  lastLoginMethod LoginMethod?

  // Onboarding & Preferences
  onboardingStep Int       @default(0)
  onboardingCompleted Boolean @default(false)
  preferences    Json?
  locale         String    @default("en")

  // Security
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  backupCodes    String[] @default([])

  // Metadata
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizations  UserOrganization[]   // NEW: Multi-organization membership
  companyAccess  UserCompanyAccess[]  // NEW: Multi-company access
  userPreference UserPreference?      // NEW: User preferences
  sessions       Session[]
  socialAccounts SocialAccount[]
  createdAgents  Agent[]      @relation("AgentCreator")
  ownedAgents    Agent[]      @relation("AgentOwner")
  workflows      AgentWorkflow[] @relation("WorkflowCreator")
  auditLogs      AuditLog[]
  notifications  Notification[]
  createdSwarms  AgentSwarm[]
  sentInvites    OrganizationInvite[] @relation("InviteSender")
  receivedInvites OrganizationInvite[] @relation("InviteRecipient")
  createdEntities EntityDefinition[] @relation("CreatedEntities") // V2: Dynamic entities
  updatedEntities EntityDefinition[] @relation("UpdatedEntities") // V2: Dynamic entities
  entityVersions EntityVersionHistory[] @relation("EntityVersionCreator") // V2: Entity versions
  uploadedFiles  File[]            @relation("UploadedFiles") // NEW: Uploaded files
  analyticsEvents AnalyticsEvent[]  @relation("UserEvents") // NEW: Analytics events

  @@index([organizationId, status])
  @@index([email])
  @@index([lastLoginAt])
  @@index([isSuperAdmin])
  @@index([status])
  @@index([role])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("users")
}

// ==================== MULTI-ORGANIZATION MEMBERSHIP ====================

model UserOrganization {
  id              String   @id @default(cuid())
  userId          String
  organizationId  String

  // Role in this organization
  role            UserRole @default(MEMBER)
  isOwner         Boolean  @default(false)

  // Status
  status          String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  joinedAt        DateTime @default(now())
  lastAccessedAt  DateTime?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization @relation("OrganizationMembers", fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([status])
  @@map("user_organizations")
}

model OrganizationInvite {
  id              String   @id @default(cuid())
  organizationId  String
  invitedByUserId String

  // Invite details
  email           String
  role            UserRole @default(MEMBER)
  inviteToken     String   @unique

  // Status
  status          String   @default("PENDING") // PENDING, ACCEPTED, DECLINED, EXPIRED
  expiresAt       DateTime
  acceptedAt      DateTime?
  declinedAt      DateTime?

  // Recipient (if they accept)
  acceptedByUserId String?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy       User     @relation("InviteSender", fields: [invitedByUserId], references: [id], onDelete: Cascade)
  acceptedBy      User?    @relation("InviteRecipient", fields: [acceptedByUserId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([organizationId])
  @@index([status])
  @@index([inviteToken])
  @@map("organization_invites")
}

// ==================== SUBDOMAIN MANAGEMENT ====================

model SubdomainRecord {
  id              String   @id @default(cuid())
  organizationId  String

  // DNS Configuration
  subdomain       String   @unique
  fullDomain      String   @unique
  recordType      String   @default("CNAME")
  recordValue     String

  // Status & Health
  status          SubdomainStatus @default(PENDING)
  isActive        Boolean  @default(true)

  // DNS Provider Info
  dnsProvider     String   @default("cloudflare")
  externalRecordId String?

  // SSL/TLS
  sslEnabled      Boolean  @default(true)
  sslProvider     String   @default("cloudflare")
  sslCertId       String?

  // Monitoring
  lastHealthCheck DateTime?
  healthStatus    HealthStatus @default(UNKNOWN)
  uptime          Float    @default(100.0)
  responseTime    Int?

  // Metadata
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([subdomain])
  @@index([status])
  @@index([organizationId])
  @@map("subdomain_records")
}

// Custom Domains (Enterprise Feature)
model CustomDomain {
  id              String   @id @default(cuid())
  organizationId  String

  // Domain Configuration
  domain          String   @unique  // e.g., "platform.acme-corp.com"
  isApex          Boolean  @default(false)  // true if using apex domain (acme-corp.com)

  // Verification
  verificationToken String  @unique
  verificationMethod String @default("DNS_TXT")  // DNS_TXT, DNS_CNAME, or FILE
  isVerified      Boolean  @default(false)
  verifiedAt      DateTime?
  verificationAttempts Int  @default(0)
  lastVerificationAttempt DateTime?

  // DNS Records (for user to configure)
  txtRecordName   String?
  txtRecordValue  String?
  cnameRecordName String?
  cnameRecordValue String?

  // SSL/TLS Configuration
  sslStatus       SSLStatus @default(PENDING)
  sslProvider     String    @default("letsencrypt")
  sslCertId       String?   // External certificate ID
  sslIssuedAt     DateTime?
  sslExpiresAt    DateTime?
  autoRenewSsl    Boolean   @default(true)

  // Status & Health
  status          String    @default("PENDING")  // PENDING, ACTIVE, FAILED, DISABLED
  isActive        Boolean   @default(false)
  lastHealthCheck DateTime?
  healthCheckStatus String? // "HEALTHY", "DEGRADED", "DOWN"

  // CDN & Proxy
  cdnEnabled      Boolean   @default(true)
  proxied         Boolean   @default(true)  // Cloudflare proxy
  externalRecordId String?  // Cloudflare/DNS provider record ID

  // Metadata
  createdBy       String?   // User ID who added the domain
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([domain])
  @@index([organizationId])
  @@index([status])
  @@index([isVerified])
  @@map("custom_domains")
}

// ==================== OAUTH & SOCIAL ACCOUNTS ====================

model SocialAccount {
  id              String   @id @default(cuid())
  userId          String
  organizationId  String

  // Provider Info
  provider        OAuthProvider
  providerId      String
  providerEmail   String?
  providerUsername String?

  // OAuth Data
  accessToken     String?
  refreshToken    String?
  tokenType       String   @default("Bearer")
  expiresAt       DateTime?
  scope           String[] @default([])

  // Account Info
  displayName     String?
  profileUrl      String?
  avatarUrl       String?

  // Metadata from Provider
  providerData    Json?

  // Status
  isActive        Boolean  @default(true)
  isPrimary       Boolean  @default(false)
  lastUsedAt      DateTime?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@index([organizationId])
  @@map("social_accounts")
}

model OAuthConfig {
  id              String   @id @default(cuid())
  organizationId  String

  // Provider Configuration
  provider        OAuthProvider
  clientId        String
  clientSecret    String   // Encrypted

  // Configuration
  enabled         Boolean  @default(true)
  allowedDomains  String[] @default([])
  autoCreateUsers Boolean  @default(true)
  autoJoinOrg     Boolean  @default(false)
  defaultRole     UserRole @default(MEMBER)

  // Customization
  buttonText      String?
  buttonColor     String?
  logoUrl         String?

  // Advanced Settings
  scope           String[] @default([])
  additionalParams Json?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, provider])
  @@index([organizationId])
  @@map("oauth_configs")
}

// ==================== SESSION MANAGEMENT ====================

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique @default(cuid())

  // Session Details
  sessionType SessionType @default(WEB)
  loginMethod LoginMethod?

  // Company Context (NEW)
  companyId   String?  // Current active company for this session

  // Device & Location
  userAgent String?
  ipAddress String?
  device    String?
  browser   String?
  os        String?
  location  Json?

  // Subdomain Support
  subdomain String?
  originUrl String?

  // Security
  isActive  Boolean @default(true)
  isSuspicious Boolean @default(false)
  riskScore Float?

  // Session Management
  expiresAt DateTime
  lastAccessedAt DateTime @default(now())
  refreshedAt DateTime @default(now())

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([companyId])
  @@index([subdomain])
  @@index([isActive])
  @@index([expiresAt])
  @@map("sessions")
}

// ==================== ACCOUNTING MODULE ====================

model Account {
  id              String   @id @default(cuid())
  companyId       String

  // Account Details
  accountCode     String   // e.g., "1000", "1100"
  accountName     String   // e.g., "Cash", "Accounts Receivable"
  accountType     AccountType
  accountSubType  String?  // e.g., "CurrentAsset", "FixedAsset"

  // Hierarchy
  parentAccountId String?
  level           Int      @default(0) // Tree depth level
  fullPath        String?  // e.g., "1000/1100/1110" for quick queries

  // Settings
  isSystemAccount Boolean  @default(false) // Cannot be deleted
  isActive        Boolean  @default(true)
  isContraAccount Boolean  @default(false) // Contra accounts (e.g., Accumulated Depreciation)
  normalBalance   NormalBalance @default(DEBIT) // DEBIT or CREDIT

  // Balance
  balance         Decimal  @default(0) @db.Decimal(15, 2)
  debitBalance    Decimal  @default(0) @db.Decimal(15, 2)
  creditBalance   Decimal  @default(0) @db.Decimal(15, 2)

  // Description
  description     String?
  notes           String?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent          Account? @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  children        Account[] @relation("AccountHierarchy")
  journalEntries  JournalEntry[]

  @@unique([companyId, accountCode])
  @@index([companyId])
  @@index([accountType])
  @@index([parentAccountId])
  @@index([isActive])
  @@map("accounts")
}

model Transaction {
  id              String   @id @default(cuid())
  companyId       String

  // Transaction Details
  transactionNumber String
  transactionDate DateTime
  postingDate     DateTime?    // When transaction was posted
  description     String?
  reference       String?  // External reference
  memo            String?

  // Transaction Type
  transactionType TransactionType @default(JOURNAL_ENTRY)

  // Status
  status          TransactionStatus @default(DRAFT)

  // Amounts
  totalDebit      Decimal  @default(0) @db.Decimal(15, 2)
  totalCredit     Decimal  @default(0) @db.Decimal(15, 2)

  // Related Entities
  customerId      String?
  vendorId        String?

  // Audit Trail
  createdBy       String
  approvedBy      String?
  approvedAt      DateTime?
  postedBy        String?
  postedAt        DateTime?

  // Reversal
  isReversed      Boolean  @default(false)
  reversedBy      String?
  reversedAt      DateTime?
  reversalOf      String?  // ID of transaction this reverses

  // Attachments
  attachments     Json?    // Array of file URLs

  // Metadata
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  journalEntries  JournalEntry[]
  customer        Customer? @relation(fields: [customerId], references: [id])
  vendor          Vendor?   @relation(fields: [vendorId], references: [id])

  @@unique([companyId, transactionNumber])
  @@index([companyId])
  @@index([transactionDate])
  @@index([status])
  @@index([customerId])
  @@index([vendorId])
  @@map("transactions")
}

model JournalEntry {
  id              String   @id @default(cuid())
  transactionId   String
  accountId       String
  lineNumber      Int      // Order of entry in transaction

  // Amounts (always positive, indicated by type)
  debit           Decimal  @default(0) @db.Decimal(15, 2)
  credit          Decimal  @default(0) @db.Decimal(15, 2)

  // Details
  description     String?
  memo            String?

  // Dimensions (for cost accounting)
  department      String?
  project         String?
  costCenter      String?

  // Related Entities
  customerId      String?
  vendorId        String?

  // Metadata
  metadata        Json?
  createdAt       DateTime @default(now())

  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  account         Account  @relation(fields: [accountId], references: [id])

  @@index([transactionId])
  @@index([accountId])
  @@index([department])
  @@index([project])
  @@map("journal_entries")
}

model Customer {
  id              String   @id @default(cuid())
  companyId       String

  // Customer Details
  customerNumber  String   // Unique customer number
  name            String
  displayName     String
  email           String?
  phone           String?

  // Address
  billingAddress  Json?
  shippingAddress Json?

  // Financial
  balance         Decimal  @default(0) @db.Decimal(15, 2)
  creditLimit     Decimal  @default(0) @db.Decimal(15, 2)
  paymentTerms    String?  // e.g., "Net 30"

  // Tax
  taxId           String?
  isTaxExempt     Boolean  @default(false)

  // Status
  status          String   @default("ACTIVE")

  // Metadata
  notes           String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@unique([companyId, customerNumber])
  @@index([companyId])
  @@index([email])
  @@map("customers")
}

model Vendor {
  id              String   @id @default(cuid())
  companyId       String

  // Vendor Details
  vendorNumber    String
  name            String
  displayName     String
  email           String?
  phone           String?

  // Address
  address         Json?

  // Financial
  balance         Decimal  @default(0) @db.Decimal(15, 2)
  paymentTerms    String?

  // Tax
  taxId           String?

  // Banking
  bankAccount     Json?    // Bank account details

  // Status
  status          String   @default("ACTIVE")

  // Metadata
  notes           String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@unique([companyId, vendorNumber])
  @@index([companyId])
  @@index([email])
  @@map("vendors")
}

// ==================== AGENT MANAGEMENT (EXISTING) ====================

model Agent {
  id              String   @id @default(cuid())
  uuid            String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // External API ID
  organizationId  String
  creatorId       String
  ownerId         String

  // Basic Info
  name            String
  type            AgentType @default(CUSTOM)
  description     String?
  avatar          String?
  category        String?
  status          AgentStatus @default(DRAFT)

  // AI Configuration
  model           String   @default("gpt-4")
  systemPrompt    String
  temperature     Float    @default(0.7)
  maxTokens       Int      @default(4000)
  topP            Float    @default(1.0)
  frequencyPenalty Float   @default(0.0)
  presencePenalty Float    @default(0.0)

  // Capabilities
  capabilities    String[] @default([])
  tools           Json?
  integrations    Json?

  // Monetization
  pricing         Json?
  isPublic        Boolean  @default(false)
  isMarketplace   Boolean  @default(false)

  // Performance
  usageCount      Int      @default(0)
  successRate     Float    @default(100.0)
  avgResponseTime Float    @default(0)
  rating          Float    @default(0)
  reviewCount     Int      @default(0)

  // Metadata
  tags            String[] @default([])
  version         String   @default("1.0.0")
  isActive        Boolean  @default(true)

  // Timestamps
  lastUsedAt      DateTime?
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User @relation("AgentCreator", fields: [creatorId], references: [id])
  owner           User @relation("AgentOwner", fields: [ownerId], references: [id])
  interactions    AgentInteraction[]
  workflows       AgentWorkflow[]
  templates       AgentTemplate[]
  swarmMembers    SwarmMember[]

  @@index([organizationId, status])
  @@index([isPublic, category])
  @@index([creatorId])
  @@index([type])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("agents")
}

model AgentInteraction {
  id             String   @id @default(cuid())
  organizationId String
  agentId        String
  sessionId      String?
  userId         String?

  // Interaction Details
  type           InteractionType @default(CHAT)
  input          Json
  output         Json?
  context        Json?

  // Performance Metrics
  tokens         Json?
  latency        Int?
  cost           Float?

  // Status & Error
  status         InteractionStatus @default(PENDING)
  errorMessage   String?
  retryCount     Int      @default(0)

  // Metadata
  userAgent      String?
  ipAddress      String?
  metadata       Json?

  // Timestamps
  startedAt      DateTime @default(now())
  completedAt    DateTime?

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent          Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([organizationId, agentId])
  @@index([startedAt])
  @@index([status])
  @@index([completedAt])
  @@index([userId])
  @@map("agent_interactions")
}

model AgentWorkflow {
  id              String   @id @default(cuid())
  uuid            String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // External API ID
  organizationId  String
  creatorId       String

  // Basic Info
  name            String
  description     String?
  category        String?
  status          WorkflowStatus @default(DRAFT)

  // Workflow Definition
  definition      Json
  version         String   @default("1.0.0")

  // Execution Settings
  triggerType     TriggerType @default(MANUAL)
  triggerConfig   Json?
  schedule        String?

  // Performance
  executionCount  Int      @default(0)
  successRate     Float    @default(100.0)
  avgDuration     Int      @default(0)

  // Publishing
  isPublic        Boolean  @default(false)
  tags            String[] @default([])

  // Timestamps
  lastExecutedAt  DateTime?
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User @relation("WorkflowCreator", fields: [creatorId], references: [id])
  executions      WorkflowExecution[]
  agents          Agent[]
  templates       WorkflowTemplate[]

  @@index([organizationId, status])
  @@index([creatorId])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("agent_workflows")
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  workflowId  String
  triggeredBy String?

  // Execution
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?

  // Progress
  currentNode   String?
  completedNodes String[] @default([])

  // Input/Output
  input         Json?
  output        Json?
  variables     Json?

  // Error
  error         String?
  failedNode    String?

  // Relations
  workflow      AgentWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId, status])
  @@map("workflow_executions")
}

model AgentSwarm {
  id              String   @id @default(cuid())
  organizationId  String
  creatorId       String

  // Basic Info
  name            String
  description     String?
  type            SwarmType @default(SEQUENTIAL)
  status          AgentStatus @default(DRAFT)

  // Configuration
  configuration   Json?
  executionOrder  Json?

  // Members
  members         SwarmMember[]

  // Performance
  executionCount  Int      @default(0)
  successRate     Float    @default(100.0)
  avgDuration     Int      @default(0)

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastExecutedAt  DateTime?

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User         @relation(fields: [creatorId], references: [id])

  @@map("agent_swarms")
}

model SwarmMember {
  id              String   @id @default(cuid())
  swarmId         String
  agentId         String

  // Member Configuration
  role            SwarmRole @default(WORKER)
  order           Int       @default(0)
  isRequired      Boolean   @default(true)

  // Configuration
  configuration   Json?

  // Performance
  executionCount  Int       @default(0)
  successCount    Int       @default(0)
  errorCount      Int       @default(0)
  avgDuration     Int       @default(0)

  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastExecutedAt  DateTime?

  // Relations
  swarm           AgentSwarm @relation(fields: [swarmId], references: [id], onDelete: Cascade)
  agent           Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([swarmId, agentId])
  @@map("swarm_members")
}

// ==================== TEMPLATES & MARKETPLACE ====================

model AgentTemplate {
  id              String   @id @default(cuid())
  agentId         String?
  organizationId  String

  // Template Info
  name            String
  category        String
  description     String
  icon            String?

  // Configuration Template
  configTemplate  Json
  requirements    Json?

  // Marketplace
  isPublic        Boolean  @default(false)
  isCertified     Boolean  @default(false)
  price           Float    @default(0)

  // Usage
  installCount    Int      @default(0)
  rating          Float    @default(0)
  reviewCount     Int      @default(0)

  // Metadata
  tags            String[] @default([])
  version         String   @default("1.0.0")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  agent           Agent? @relation(fields: [agentId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([isPublic, category])
  @@map("agent_templates")
}

model WorkflowTemplate {
  id              String   @id @default(cuid())
  organizationId  String
  workflowId      String?

  // Template Info
  name            String
  category        String
  description     String

  // Template Data
  template        Json

  // Marketplace
  isPublic        Boolean  @default(false)
  price           Float    @default(0)

  // Usage
  useCount        Int      @default(0)
  rating          Float    @default(0)

  // Metadata
  tags            String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workflow        AgentWorkflow? @relation(fields: [workflowId], references: [id], onDelete: SetNull)

  @@map("workflow_templates")
}

// ==================== SUBSCRIPTION & BILLING ====================

model Subscription {
  id              String   @id @default(cuid())
  uuid            String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // External API ID
  organizationId  String
  paymentGatewaySubscriptionId String @unique

  // Subscription Details
  status          SubscriptionStatus
  planType        PlanType
  billingCycle    BillingCycle
  currentPeriodStart DateTime
  currentPeriodEnd DateTime

  // Pricing
  amount          Float
  currency        String @default("INR")
  taxAmount       Float?
  discountAmount  Float? @default(0)
  discountCode    String?

  // Usage Limits
  userLimit       Int
  agentLimit      Int
  workflowLimit   Int
  apiCallLimit    Int

  // Payment Retry & Dunning (NEW)
  failedPaymentCount Int @default(0)
  lastBillingDate    DateTime?
  nextBillingDate    DateTime?
  retryAt            DateTime?

  // Status
  cancelAtPeriodEnd Boolean @default(false)
  canceledAt      DateTime?
  trialEnd        DateTime?

  // Metadata
  metadata        Json?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices        Invoice[]
  payments        Payment[]

  @@index([organizationId])
  @@index([status])
  @@index([nextBillingDate])
  @@map("subscriptions")
}

model Invoice {
  id              String   @id @default(cuid())
  organizationId  String
  subscriptionId  String?

  // Invoice Details
  invoiceNumber   String   @unique
  status          InvoiceStatus
  amount          Float
  currency        String   @default("INR")
  taxAmount       Float?
  totalAmount     Float

  // Billing
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?
  dueDate         DateTime
  paidAt          DateTime?

  // Payment Gateway Integration
  paymentGatewayInvoiceId String?  @unique
  paymentGatewayChargeId  String?
  paymentGateway          String   @default("razorpay")

  // Payment Retry Logic (NEW)
  attemptCount    Int      @default(0)
  lastAttemptAt   DateTime?
  nextAttemptAt   DateTime?
  failureReason   String?

  // Refund Tracking (NEW)
  refundedAmount  Float?   @default(0)
  refundedAt      DateTime?
  refundReason    String?

  // Invoice URLs (NEW)
  hostedInvoiceUrl String?
  invoicePdf      String?

  // Line Items (NEW)
  lineItems       Json?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  payments        Payment[]

  @@index([organizationId])
  @@index([status])
  @@index([nextAttemptAt])
  @@index([createdAt])
  @@index([dueDate])
  @@index([paidAt])
  @@map("invoices")
}

// NEW: Payment Transaction Model
model Payment {
  id              String   @id @default(cuid())
  uuid            String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // External API ID
  organizationId  String
  subscriptionId  String?
  invoiceId       String?

  // Payment Details
  amount          Float
  currency        String   @default("INR")
  status          PaymentStatus
  paymentMethod   String?  // card, upi, netbanking, wallet

  // Gateway Integration
  paymentGateway      String @default("razorpay")
  gatewayPaymentId    String @unique
  gatewayOrderId      String?
  gatewayCustomerId   String?

  // Payment Method Details
  cardLast4       String?
  cardBrand       String?
  upiId           String?
  bankName        String?

  // Status Tracking
  capturedAt      DateTime?
  failedAt        DateTime?
  refundedAt      DateTime?
  failureReason   String?
  failureCode     String?

  // Metadata
  metadata        Json?
  description     String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  invoice         Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([status])
  @@index([gatewayPaymentId])
  @@index([createdAt])
  @@index([capturedAt])
  @@map("payments")
}

// NEW: Webhook Event Logging
model WebhookEvent {
  id              String   @id @default(cuid())

  // Event Details
  source          String   // razorpay, stripe, etc
  eventType       String   // payment.captured, subscription.created
  eventId         String?  @unique // External event ID

  // Payload
  payload         Json
  headers         Json?

  // Processing
  processed       Boolean  @default(false)
  processedAt     DateTime?
  processingError String?
  retryCount      Int      @default(0)

  // Metadata
  ipAddress       String?
  userAgent       String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([source, eventType])
  @@index([processed])
  @@index([createdAt])
  @@map("webhook_events")
}

// ==================== API KEYS & WEBHOOKS ====================

model ApiKey {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  keyHash        String   @unique
  keyPreview     String

  // Permissions & Scope
  permissions    Json     @default("[]")
  rateLimit      Int      @default(1000)
  ipWhitelist    String[] @default([])

  // Usage
  lastUsedAt     DateTime?
  usageCount     Int      @default(0)
  isActive       Boolean  @default(true)

  // Metadata
  expiresAt      DateTime?
  createdAt      DateTime @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("api_keys")
}

model Webhook {
  id             String   @id @default(cuid())
  organizationId String

  // Webhook Details
  name           String
  url            String
  events         String[]
  secret         String?

  // Status & Performance
  isActive       Boolean  @default(true)
  successCount   Int      @default(0)
  failureCount   Int      @default(0)
  lastTriggeredAt DateTime?
  lastStatus     Int?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("webhooks")
}

// ==================== AUDIT & MONITORING ====================

model AuditLog {
  id             String   @id @default(cuid())
  organizationId String?
  userId         String?
  adminId        String?
  companyId      String?  // NEW: Track company-specific actions

  // Action Details
  action         String
  eventType      String?  // e.g., "LOGIN_SUCCESS", "PERMISSION_DENIED"
  severity       String?  // e.g., "INFO", "WARNING", "ERROR", "CRITICAL"
  resourceType   String
  resourceId     String?
  oldValues      Json?
  newValues      Json?
  details        Json?    // Additional event-specific details

  // Context
  ipAddress      String?
  userAgent      String?
  metadata       Json?

  // Timestamp
  createdAt      DateTime @default(now())

  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  admin          PlatformAdmin? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  @@index([organizationId, action])
  @@index([companyId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model UsageMetric {
  id             String   @id @default(cuid())
  organizationId String
  metricType     String
  metricName     String
  value          Float
  unit           String

  // Dimensions
  dimensions     Json?

  // Time
  recordedAt     DateTime @default(now())
  periodStart    DateTime
  periodEnd      DateTime

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, metricType])
  @@index([recordedAt])
  @@map("usage_metrics")
}

model Notification {
  id             String   @id @default(cuid())
  organizationId String
  userId         String?

  // Notification Details
  type           NotificationType
  title          String
  message        String
  actionUrl      String?

  // Status
  isRead         Boolean  @default(false)
  readAt         DateTime?

  // Metadata
  metadata       Json?
  expiresAt      DateTime?
  createdAt      DateTime @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, userId, isRead])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

// ==================== DYNAMIC ENTITY SYSTEM (V2) ====================

model EntityDefinition {
  id               String   @id @default(cuid())
  organizationId   String

  // Entity Identity
  entityName       String
  displayName      String
  tableName        String   @unique

  // Classification
  vertical         String?  // 'healthcare', 'manufacturing', 'retail'
  module           String?  // 'sales', 'inventory', 'hr'
  category         String?  // 'transactional', 'master', 'reference'

  // JSON Schema Definition
  schemaDefinition Json     // Column definitions, constraints, indexes

  // Entity Behaviors
  isOrganizationScoped Boolean @default(true)
  enableAudit      Boolean  @default(true)
  enableWorkflow   Boolean  @default(false)
  enableVersioning Boolean  @default(false)
  softDelete       Boolean  @default(true)

  // UI Metadata
  defaultUIConfig  Json     @default("{}")
  listViewConfig   Json?
  formViewConfig   Json?

  // API Configuration
  apiEnabled       Boolean  @default(true)
  apiRateLimit     Int      @default(1000)

  // Lifecycle
  status           String   @default("active") // 'draft', 'active', 'deprecated'
  version          Int      @default(1)
  isSystemEntity   Boolean  @default(false)

  // Metadata
  description      String?
  tags             String[] @default([])
  documentationUrl String?

  // Audit
  createdBy        String
  updatedBy        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deletedAt        DateTime?

  // Relations
  organization     Organization @relation("EntityDefinitions", fields: [organizationId], references: [id], onDelete: Cascade)
  creator          User @relation("CreatedEntities", fields: [createdBy], references: [id])
  updater          User? @relation("UpdatedEntities", fields: [updatedBy], references: [id])
  sourceRelationships EntityRelationship[] @relation("SourceEntity")
  targetRelationships EntityRelationship[] @relation("TargetEntity")
  fieldValues      DynamicFieldValue[]
  versionHistory   EntityVersionHistory[]

  @@unique([organizationId, entityName])
  @@index([organizationId, status])
  @@index([vertical])
  @@index([module])
  @@map("EntityDefinition")
}

model EntityRelationship {
  id               String   @id @default(cuid())

  // Source entity
  sourceEntityId   String
  sourceEntity     EntityDefinition @relation("SourceEntity", fields: [sourceEntityId], references: [id], onDelete: Cascade)

  // Target entity
  targetEntityId   String
  targetEntity     EntityDefinition @relation("TargetEntity", fields: [targetEntityId], references: [id], onDelete: Cascade)

  // Relationship type
  relationshipType String   // 'one_to_one', 'one_to_many', 'many_to_many', 'polymorphic'

  // Foreign key details
  sourceColumn     String
  targetColumn     String   @default("id")

  // On delete action
  onDelete         String   @default("RESTRICT") // 'CASCADE', 'RESTRICT', 'SET NULL', 'SET DEFAULT'

  // Display metadata
  displayName      String?
  reverseDisplayName String?

  createdAt        DateTime @default(now())

  @@unique([sourceEntityId, sourceColumn])
  @@map("EntityRelationship")
}

model DynamicFieldValue {
  id                 String   @id @default(cuid())
  entityDefinitionId String
  recordId           String   // ID of the record in the dynamic table

  fieldName          String
  fieldType          String   // 'string', 'number', 'boolean', 'date', 'json'

  // Polymorphic value columns
  stringValue        String?
  numberValue        Decimal? @db.Decimal(20, 6)
  booleanValue       Boolean?
  dateValue          DateTime?
  jsonValue          Json?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  entityDefinition   EntityDefinition @relation(fields: [entityDefinitionId], references: [id], onDelete: Cascade)

  @@unique([entityDefinitionId, recordId, fieldName])
  @@index([entityDefinitionId, recordId])
  @@map("DynamicFieldValue")
}

model EntityVersionHistory {
  id                 String   @id @default(cuid())
  entityDefinitionId String

  version            Int
  schemaDefinition   Json
  changeDescription  String?
  migrationScript    String?  // SQL for data migration

  createdBy          String
  createdAt          DateTime @default(now())

  // Relations
  entityDefinition   EntityDefinition @relation(fields: [entityDefinitionId], references: [id], onDelete: Cascade)
  creator            User @relation("EntityVersionCreator", fields: [createdBy], references: [id])

  @@unique([entityDefinitionId, version])
  @@map("EntityVersionHistory")
}

model MigrationLog {
  id             String   @id @default(cuid())
  migrationName  String
  appliedAt      DateTime @default(now())
  success        Boolean  @default(true)
  errorMessage   String?

  @@map("MigrationLog")
}

// ==================== ðŸŽ¯ PLATFORM INFRASTRUCTURE (NEW) ====================

model SystemSetting {
  id              String   @id @default(cuid())
  organizationId  String?
  key             String
  value           Json
  type            String   // 'global', 'organization', 'user', 'feature_flag'
  category        String   // 'general', 'security', 'billing', 'features', 'ui', 'integrations'
  description     String?
  isPublic        Boolean  @default(false)
  isEditable      Boolean  @default(true)
  validationRules Json?    // JSON schema for value validation
  defaultValue    Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization    Organization? @relation("OrganizationSettings", fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, key])
  @@index([category])
  @@index([type])
  @@map("system_settings")
}

model File {
  id              String   @id @default(cuid())
  organizationId  String
  uploadedBy      String

  // File Identity
  filename        String   // Generated filename (UUID-based)
  originalName    String   // Original uploaded filename
  mimeType        String
  size            Int      // Bytes
  extension       String?

  // Storage
  path            String   // S3/MinIO path
  url             String   // Public or signed URL
  thumbnailUrl    String?  // For images/videos
  bucket          String   @default("neurallempire-files")
  storageProvider String   @default("s3") // 's3', 'minio', 'local', 'cloudflare'

  // Organization
  folder          String?  // Virtual folder path
  tags            String[] @default([])
  category        String?  // 'document', 'image', 'video', 'audio', 'archive', 'other'

  // Metadata
  metadata        Json?    // EXIF, dimensions, duration, etc.
  isPublic        Boolean  @default(false)
  downloadCount   Int      @default(0)

  // Lifecycle
  expiresAt       DateTime?
  lastAccessedAt  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime? // Soft delete

  // Relations
  uploader        User     @relation("UploadedFiles", fields: [uploadedBy], references: [id], onDelete: Cascade)
  organization    Organization @relation("OrganizationFiles", fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, folder])
  @@index([uploadedBy])
  @@index([category])
  @@index([createdAt])
  @@map("files")
}

model EmailNotification {
  id              String   @id @default(cuid())
  organizationId  String

  // Recipients
  to              String[]
  cc              String[] @default([])
  bcc             String[] @default([])
  from            String
  replyTo         String?

  // Content
  subject         String
  body            String   @db.Text
  bodyHtml        String?  @db.Text
  templateId      String?
  templateData    Json?

  // Attachments
  attachments     Json?    // Array of file references

  // Delivery Status
  status          String   @default("queued") // 'queued', 'sending', 'sent', 'failed', 'bounced', 'delivered', 'opened', 'clicked'
  provider        String   @default("sendgrid") // 'sendgrid', 'ses', 'smtp'
  providerId      String?  // External provider message ID

  // Tracking
  sentAt          DateTime?
  deliveredAt     DateTime?
  openedAt        DateTime?
  clickedAt       DateTime?
  bouncedAt       DateTime?
  openCount       Int      @default(0)
  clickCount      Int      @default(0)

  // Error Handling
  error           String?
  errorCode       String?
  retryCount      Int      @default(0)
  maxRetries      Int      @default(3)

  // Metadata
  priority        String   @default("normal") // 'low', 'normal', 'high', 'urgent'
  tags            String[] @default([])
  metadata        Json?
  scheduledFor    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation("OrgEmails", fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, status])
  @@index([status])
  @@index([createdAt])
  @@index([scheduledFor])
  @@map("email_notifications")
}

model AnalyticsEvent {
  id              String   @id @default(cuid())
  userId          String?
  organizationId  String
  sessionId       String?

  // Event Details
  eventName       String   // 'page_view', 'button_click', 'form_submit', 'agent_created', etc.
  eventType       String   // 'user_action', 'system_event', 'business_metric', 'error'
  category        String?  // 'engagement', 'conversion', 'performance', 'error'
  action          String?  // 'create', 'update', 'delete', 'view'
  label           String?
  value           Float?

  // Context
  properties      Json?    // Custom event properties
  pageUrl         String?
  pagePath        String?
  pageTitle       String?
  referrer        String?

  // Technical Context
  userAgent       String?
  ipAddress       String?
  country         String?
  city            String?
  device          String?  // 'desktop', 'mobile', 'tablet'
  browser         String?
  os              String?

  // Timing
  timestamp       DateTime @default(now())
  duration        Int?     // Milliseconds (for timed events)

  // Attribution
  source          String?  // 'organic', 'paid', 'direct', 'referral'
  medium          String?
  campaign        String?

  // Relations
  user            User?    @relation("UserEvents", fields: [userId], references: [id], onDelete: SetNull)
  organization    Organization @relation("OrgEvents", fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, eventName])
  @@index([userId])
  @@index([eventType, category])
  @@index([timestamp])
  @@index([sessionId])
  @@map("analytics_events")
}

// ==================== ENUMS ====================

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
  VIEWER
}

enum PlanType {
  TRIAL
  FREE
  STARTER
  GROWTH
  SCALE
  ENTERPRISE
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum OrgStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  DELINQUENT
  CANCELLED
  BANNED
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
  LOCKED
}

enum UserRole {
  OWNER
  ADMIN
  DEVELOPER
  ANALYST
  MEMBER
  VIEWER
}

enum SubdomainStatus {
  PENDING
  CONFIGURING
  ACTIVE
  FAILED
  SUSPENDED
  DELETED
}

enum SSLStatus {
  PENDING
  ACTIVE
  EXPIRED
  FAILED
  RENEWING
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN
}

enum OAuthProvider {
  GOOGLE
  GITHUB
  LINKEDIN
  MICROSOFT
  FACEBOOK
  TWITTER
  APPLE
  CUSTOM
}

enum SSOProvider {
  GOOGLE_WORKSPACE
  MICROSOFT_365
  OKTA
  AUTH0
  SAML
  CUSTOM
}

enum SessionType {
  WEB
  MOBILE
  API
  ADMIN
  SYSTEM
}

enum LoginMethod {
  PASSWORD
  GOOGLE
  GITHUB
  LINKEDIN
  MICROSOFT
  FACEBOOK
  SSO
  API_KEY
  MAGIC_LINK
}

enum AgentStatus {
  DRAFT
  TESTING
  READY
  ACTIVE
  PAUSED
  RUNNING
  ERROR
  MAINTENANCE
  DEPRECATED
  ARCHIVED
  DELETED
}

enum InteractionType {
  CHAT
  COMPLETION
  FUNCTION_CALL
  WORKFLOW
}

enum InteractionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum TriggerType {
  MANUAL
  SCHEDULED
  WEBHOOK
  EVENT
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
  TRIALING
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  BILLING
  SYSTEM
}

enum AgentType {
  LEAD_GENERATOR
  EMAIL_MARKETER
  SOCIAL_MEDIA
  CONTENT_CREATOR
  ANALYTICS
  CUSTOMER_SERVICE
  SALES
  SEO_OPTIMIZER
  CONVERSATIONAL
  TASK_AUTOMATION
  DATA_PROCESSOR
  INTEGRATION
  EMAIL_MARKETING
  WORKFLOW_AUTOMATION
  DATA_PROCESSING
  INTEGRATION_AGENT
  MONITORING_AGENT
  RESEARCH_AGENT
  CUSTOM
}

enum SwarmType {
  SEQUENTIAL
  PARALLEL
  HIERARCHICAL
  COLLABORATIVE
}

enum SwarmRole {
  LEADER
  WORKER
  COORDINATOR
  SPECIALIST
}

// ==================== ACCOUNTING ENUMS ====================

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  ARCHIVED
}

enum AccountingMethod {
  ACCRUAL
  CASH
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum NormalBalance {
  DEBIT
  CREDIT
}

enum TransactionType {
  JOURNAL_ENTRY
  INVOICE
  BILL
  PAYMENT
  RECEIPT
  ADJUSTMENT
  TRANSFER
  OPENING_BALANCE
  CLOSING_ENTRY
}

enum TransactionStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  POSTED
  VOID
  REVERSED
}

// ==================== ORCHESTRATOR SYSTEM ====================

// Tool Permissions
model ToolPermission {
  id              String   @id @default(cuid())
  toolId          String
  organizationId  String
  userId          String?
  roleId          String?

  actions         Json     // Array of actions: execute, view, configure, approve, admin
  conditions      Json?    // maxExecutionsPerDay, allowedDays, allowedHours, requiresApproval

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([toolId, organizationId])
  @@index([userId])
  @@index([roleId])
  @@map("tool_permissions")
}

// Tool Execution Tracking
model ToolExecution {
  id              String   @id @default(cuid())
  toolId          String
  userId          String
  organizationId  String
  agentId         String
  sessionId       String?

  success         Boolean
  duration        Int      // milliseconds
  retryCount      Int      @default(0)
  errorMessage    String?

  executedAt      DateTime @default(now())

  @@index([toolId, organizationId])
  @@index([userId])
  @@index([executedAt])
  @@map("tool_executions")
}

// Workflows
model Workflow {
  id              String   @id @default(cuid())
  name            String
  description     String?
  version         String
  organizationId  String

  definition      Json     // Full workflow definition
  isActive        Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  executions      OrchestratorWorkflowExecution[]

  @@index([organizationId])
  @@index([isActive])
  @@map("workflows")
}

// Orchestrator Workflow Executions
model OrchestratorWorkflowExecution {
  id              String   @id @default(cuid())
  workflowId      String
  executionId     String   @unique
  userId          String
  organizationId  String
  agentId         String

  status          String   // started, completed, failed
  duration        Int      @default(0)
  errorMessage    String?

  executedAt      DateTime @default(now())

  workflow        Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([organizationId])
  @@index([executionId])
  @@map("orchestrator_workflow_executions")
}

// Multi-Agent Collaborations
model AgentCollaboration {
  id              String   @id @default(cuid())
  organizationId  String
  pattern         String   // sequential, parallel, hierarchical, consensus, debate
  name            String
  description     String?

  definition      Json     // Full collaboration definition
  status          String   @default("pending")

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([organizationId])
  @@index([pattern])
  @@map("agent_collaborations")
}

// Schedules
model Schedule {
  id              String   @id @default(cuid())
  name            String
  description     String?
  organizationId  String
  agentId         String
  type            String   // one-time, recurring, cron

  definition      Json     // Full schedule definition
  isActive        Boolean  @default(true)
  nextExecutionAt DateTime?
  lastExecutedAt  DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  executions      ScheduleExecution[]

  @@index([organizationId])
  @@index([agentId])
  @@index([isActive])
  @@index([nextExecutionAt])
  @@map("schedules")
}

// Schedule Executions
model ScheduleExecution {
  id              String   @id @default(cuid())
  scheduleId      String
  scheduledFor    DateTime
  executedAt      DateTime?

  status          String   // pending, running, completed, failed, skipped
  result          Json?
  error           String?
  duration        Int?
  attempts        Int      @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  schedule        Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([status])
  @@index([scheduledFor])
  @@map("schedule_executions")
}

// Marketplace Items
model MarketplaceItem {
  id                  String   @id @default(cuid())
  type                String   // agent, tool, integration, workflow
  name                String
  description         String
  longDescription     String?
  version             String
  author              String
  authorOrganizationId String?

  isPublic            Boolean  @default(true)
  isOfficial          Boolean  @default(false)

  category            String
  tags                String[] @default([])
  pricing             Json     // type, price, trialDays

  icon                String?
  screenshots         String[] @default([])
  demoVideo           String?

  definition          Json     // Tool/agent/workflow definition
  requirements        Json?    // minVersion, permissions, dependencies
  documentation       String?
  changelog           String?

  installCount        Int      @default(0)
  activeInstallCount  Int      @default(0)
  rating              Float    @default(0)
  reviewCount         Int      @default(0)

  publishedAt         DateTime @default(now())
  updatedAt           DateTime @updatedAt
  verifiedAt          DateTime?

  installations       MarketplaceInstallation[]
  reviews             MarketplaceReview[]

  @@index([type])
  @@index([category])
  @@index([isPublic])
  @@index([isOfficial])
  @@map("marketplace_items")
}

// Marketplace Installations
model MarketplaceInstallation {
  id                  String   @id @default(cuid())
  marketplaceItemId   String
  organizationId      String
  installedBy         String
  version             String

  status              String   // active, inactive, failed
  usageCount          Int      @default(0)
  config              Json?
  metadata            Json?

  installedAt         DateTime @default(now())
  lastUsedAt          DateTime?
  updatedAt           DateTime @updatedAt

  marketplaceItem     MarketplaceItem @relation(fields: [marketplaceItemId], references: [id], onDelete: Cascade)

  @@index([marketplaceItemId])
  @@index([organizationId])
  @@index([status])
  @@map("marketplace_installations")
}

// Marketplace Reviews
model MarketplaceReview {
  id                  String   @id @default(cuid())
  marketplaceItemId   String
  userId              String
  organizationId      String

  rating              Int      // 1-5
  title               String?
  comment             String?
  helpful             Int      @default(0)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  marketplaceItem     MarketplaceItem @relation(fields: [marketplaceItemId], references: [id], onDelete: Cascade)

  @@index([marketplaceItemId])
  @@index([userId])
  @@map("marketplace_reviews")
}

// Connectors
model Connector {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String   // database, api, file, etc.
  organizationId  String

  config          Json     // Connection configuration
  credentials     String?  // Encrypted credentials
  isActive        Boolean  @default(true)

  lastTestedAt    DateTime?
  lastTestResult  String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([organizationId])
  @@index([type])
  @@map("connectors")
}

// Knowledge Base Entries (RAG System)
model KnowledgeBaseEntry {
  id              String   @id @default(cuid())
  organizationId  String
  content         String   @db.Text
  type            String   // document, code, conversation, entity, custom
  title           String?
  source          String?
  tags            String[] @default([])
  metadata        Json?

  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([organizationId])
  @@index([type])
  @@index([createdAt])
  @@map("knowledge_base_entries")
}

// Role Assignments (for RBAC)
model RoleAssignment {
  id              String   @id @default(cuid())
  userId          String
  organizationId  String
  roleId          String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, organizationId, roleId])
  @@index([userId])
  @@index([organizationId])
  @@index([roleId])
  @@map("role_assignments")
}

// ==================== AI MODEL CONFIGURATION ====================

model AIModelProvider {
  id              String   @id @default(cuid())

  // Provider Identity
  code            String   @unique // "openai", "anthropic", "google", "mistral"
  name            String   // "OpenAI", "Anthropic", "Google AI"
  displayName     String   // "OpenAI GPT Models"

  // API Configuration
  apiBaseUrl      String   // Base URL for API calls
  apiDocUrl       String?  // Documentation URL
  website         String?

  // Provider Settings
  icon            String?  // Icon/logo URL
  color           String?  // Brand color
  isActive        Boolean  @default(true)

  // Supported Features
  supportsStreaming Boolean @default(true)
  supportsVision    Boolean @default(false)
  supportsFunctionCalling Boolean @default(false)
  maxTokensLimit    Int?

  // Display
  orderIndex      Int      @default(0)
  description     String?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  models          AIModelConfig[]

  @@index([code])
  @@index([isActive])
  @@map("ai_model_providers")
}

model AIModelConfig {
  id              String   @id @default(cuid())
  organizationId  String
  providerId      String

  // Model Identity
  modelId         String   // "gpt-4-turbo-preview", "claude-3-opus-20240229"
  displayName     String   // "GPT-4 Turbo"
  description     String?

  // API Configuration
  apiKeyEncrypted String   // Encrypted API key
  apiKeyPreview   String   // Last 4 chars for display: "****1234"

  // Model Parameters (Defaults)
  maxTokens       Int      @default(4000)
  temperature     Float    @default(0.7)
  topP            Float?   @default(1.0)
  frequencyPenalty Float?  @default(0.0)
  presencePenalty  Float?  @default(0.0)

  // Cost & Usage
  costPerPromptToken  Decimal? @db.Decimal(10, 6) // Cost in USD
  costPerCompletionToken Decimal? @db.Decimal(10, 6)
  monthlyUsageLimit   Int?     // Max API calls per month
  currentMonthUsage   Int      @default(0)

  // Status & Settings
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false) // Default model for this org

  // Capabilities
  capabilities    Json?    // {"vision": true, "functionCalling": true}
  supportedTasks  String[] @default([]) // ["chat", "completion", "diet-planning"]

  // Metadata
  tags            String[] @default([])
  notes           String?
  createdBy       String
  lastUsedAt      DateTime?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime? // Soft delete

  // Relations
  organization    Organization     @relation("OrgAIModels", fields: [organizationId], references: [id], onDelete: Cascade)
  provider        AIModelProvider  @relation(fields: [providerId], references: [id], onDelete: Restrict)
  dietPlans       PatientDietPlan[]

  @@unique([organizationId, modelId])
  @@index([organizationId, isActive])
  @@index([providerId])
  @@index([isDefault])
  @@map("ai_model_configs")
}

// ==================== PATIENT DIET PLAN (HEALTHCARE) ====================

model PatientDietPlan {
  id              String   @id @default(cuid())
  organizationId  String
  companyId       String?

  // Patient Information
  patientName     String
  patientAge      Int?
  patientGender   String?

  // Medical Information
  disease         String   // Primary disease/condition
  allergies       String[] @default([])
  medications     String[] @default([])
  dietaryRestrictions String[] @default([])

  // Plan Configuration
  timespan        String   @default("weekly") // "weekly", "monthly", "custom"
  customDays      Int?     // For custom timespan
  mealsPerDay     Int      @default(3) // Number of meals per day

  // Generated Diet Plan (JSON)
  dietPlan        Json     // Structured diet plan with meals, recipes, nutrition info

  // Additional Information
  notes           String?
  specialInstructions String?

  // AI Generation Metadata
  aiModelConfigId String?  // Reference to configured AI model
  model           String   @default("gpt-4")
  generatedBy     String   // User ID who requested the plan
  generationTokens Json?   // Token usage stats

  // Status
  status          String   @default("active") // "active", "completed", "archived"

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  validUntil      DateTime? // Expiry date for the plan

  // Relations
  organization    Organization @relation("OrgDietPlans", fields: [organizationId], references: [id], onDelete: Cascade)
  company         Company?     @relation(fields: [companyId], references: [id], onDelete: SetNull)
  aiModelConfig   AIModelConfig? @relation(fields: [aiModelConfigId], references: [id], onDelete: SetNull)

  @@index([organizationId])
  @@index([companyId])
  @@index([status])
  @@index([createdAt])
  @@map("patient_diet_plans")
}

// ==================== ZERODHA TRADING SYSTEM ====================

// Trading Signals with 7-Layer Strategy Analysis
model TradingSignal {
  id              String   @id @default(cuid())
  organizationId  String
  userId          String

  // Market & Instrument Details
  symbol          String   // NIFTY, BANKNIFTY, FINNIFTY
  strike          Float    // Strike price
  expiry          DateTime // Option expiry date
  optionType      OptionType // CE or PE

  // Signal Details
  signalType      SignalType // BUY_CALL, BUY_PUT, SELL_CALL, SELL_PUT, HOLD, EXIT
  signalStrength  Float    @default(0) // 0-100

  // Entry Parameters
  entryPrice      Float?
  targetPrice     Float?
  stopLoss        Float?
  quantity        Int      @default(1)

  // 7-Layer Strategy Scores (0-100 each)
  layer1Score     Float    @default(0) // Market Regime Detection
  layer2Score     Float    @default(0) // Price Action Analysis
  layer3Score     Float    @default(0) // Multi-Timeframe Alignment
  layer4Score     Float    @default(0) // Volatility Analysis
  layer5Score     Float    @default(0) // Option Flow (Writer Ratio)
  layer6Score     Float    @default(0) // Risk Regime Filter
  layer7Score     Float    @default(0) // Portfolio Management

  // Layer 5: CRITICAL Writer Ratio Filter
  writerRatio     Float?   // Actual ratio (e.g., 3.2 means PUT writers are 3.2x CALL writers)
  writerRatioPassed Boolean @default(false) // Must be true for trade execution
  callWriters     Int?     // Number of CALL option writers (OI)
  putWriters      Int?     // Number of PUT option writers (OI)

  // Market Context
  vixLevel        Float?   // VIX at signal generation
  marketRegime    String?  // TRENDING, RANGING, VOLATILE
  timeframe       String   @default("15M") // Primary timeframe

  // Analysis Data
  priceActionZones Json?   // Support/Resistance, Supply/Demand zones
  multiTimeframeData Json? // 1H, 15M, 5M alignment data
  volatilityMetrics Json?  // IV, HV, volatility percentile
  riskMetrics     Json?    // Portfolio risk, position sizing

  // Signal Status
  status          SignalStatus @default(PENDING)
  statusReason    String?  // Why signal was rejected/executed

  // Performance Tracking
  executedAt      DateTime?
  closedAt        DateTime?
  actualEntry     Float?
  actualExit      Float?
  actualPnL       Float?
  actualROI       Float?

  // Metadata
  notes           String?
  metadata        Json?    // Additional analysis data

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiresAt       DateTime? // Signal validity period

  // Relations
  positions       TradingPosition[]

  @@index([organizationId, userId])
  @@index([symbol, expiry])
  @@index([status])
  @@index([createdAt])
  @@index([writerRatioPassed]) // Critical for filtering executable signals
  @@map("trading_signals")
}

// Active Trading Positions
model TradingPosition {
  id              String   @id @default(cuid())
  organizationId  String
  userId          String
  signalId        String?  // Reference to original signal

  // Position Details
  symbol          String
  strike          Float
  expiry          DateTime
  optionType      OptionType
  positionType    PositionType // LONG_CALL, LONG_PUT, SHORT_CALL, SHORT_PUT

  // Entry Details
  entryPrice      Float
  entryTime       DateTime @default(now())
  quantity        Int
  entryValue      Float    // Total entry cost

  // Current Details
  currentPrice    Float?
  currentValue    Float?
  unrealizedPnL   Float?
  unrealizedROI   Float?

  // Exit Details
  exitPrice       Float?
  exitTime        DateTime?
  exitValue       Float?
  realizedPnL     Float?
  realizedROI     Float?

  // Risk Management
  stopLoss        Float
  target          Float
  trailingStop    Boolean  @default(false)
  trailingStopDistance Float?

  // Position Status
  status          PositionStatus @default(OPEN)
  exitReason      String?  // STOP_LOSS, TARGET, MANUAL, EXPIRY, SIGNAL_EXIT

  // Performance Metrics
  highestPrice    Float?   // Highest price reached
  lowestPrice     Float?   // Lowest price reached
  maxDrawdown     Float?   // Max adverse movement
  holdingPeriod   Int?     // Minutes

  // Metadata
  notes           String?
  metadata        Json?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  signal          TradingSignal? @relation(fields: [signalId], references: [id], onDelete: SetNull)
  trade           TradingTrade?

  @@index([organizationId, userId])
  @@index([symbol, expiry])
  @@index([status])
  @@index([createdAt])
  @@map("trading_positions")
}

// Completed Trades (Historical Record)
model TradingTrade {
  id              String   @id @default(cuid())
  organizationId  String
  userId          String
  positionId      String   @unique

  // Trade Summary
  symbol          String
  strike          Float
  expiry          DateTime
  optionType      OptionType
  positionType    PositionType

  // Financial Details
  entryPrice      Float
  exitPrice       Float
  quantity        Int
  entryValue      Float
  exitValue       Float

  // P&L
  grossPnL        Float    // Profit/Loss before costs
  brokerage       Float    @default(0)
  taxes           Float    @default(0)
  netPnL          Float    // Profit/Loss after costs
  roi             Float    // Return on Investment %

  // Timing
  entryTime       DateTime
  exitTime        DateTime
  holdingPeriod   Int      // Minutes

  // Trade Classification
  tradeResult     TradeResult // WIN, LOSS, BREAKEVEN
  exitReason      String   // STOP_LOSS, TARGET, MANUAL, EXPIRY, SIGNAL_EXIT

  // Strategy Metrics
  strategyScores  Json?    // All 7 layer scores at entry
  writerRatio     Float?   // Writer ratio at entry
  vixLevel        Float?   // VIX at entry
  marketRegime    String?  // Market regime at entry

  // Performance Metrics
  maxFavorable    Float?   // Maximum favorable excursion
  maxAdverse      Float?   // Maximum adverse excursion
  riskRewardRatio Float?   // Actual R:R achieved

  // Metadata
  notes           String?
  metadata        Json?

  // Timestamps
  createdAt       DateTime @default(now())

  // Relations
  position        TradingPosition @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@index([organizationId, userId])
  @@index([symbol])
  @@index([tradeResult])
  @@index([entryTime])
  @@map("trading_trades")
}

// Backtest Results
model BacktestResult {
  id              String   @id @default(cuid())
  organizationId  String
  userId          String

  // Backtest Configuration
  name            String
  description     String?
  symbol          String   // NIFTY, BANKNIFTY, etc.
  startDate       DateTime
  endDate         DateTime
  initialCapital  Float

  // Strategy Parameters
  strategyConfig  Json     // All 7 layer configurations
  minWriterRatio  Float    @default(2.5) // Minimum writer ratio required
  riskPerTrade    Float    @default(2.0) // % of capital per trade

  // Overall Performance
  totalTrades     Int
  winningTrades   Int
  losingTrades    Int
  breakEvenTrades Int

  // Financial Metrics
  totalPnL        Float
  totalReturn     Float    // %
  winRate         Float    // %
  avgWin          Float
  avgLoss         Float
  profitFactor    Float    // Gross profit / Gross loss

  // Risk Metrics
  maxDrawdown     Float    // %
  maxDrawdownValue Float   // Absolute
  sharpeRatio     Float?
  sortinoRatio    Float?
  calmarRatio     Float?

  // Trade Statistics
  avgHoldingPeriod Float   // Minutes
  avgRiskReward   Float
  largestWin      Float
  largestLoss     Float
  consecutiveWins Int
  consecutiveLosses Int

  // Monthly Breakdown
  monthlyReturns  Json?    // Month-by-month P&L

  // Trade History
  trades          Json     // Complete trade log
  equityCurve     Json?    // Equity progression

  // Layer Performance
  layer1Accuracy  Float?   // Market Regime accuracy
  layer2Accuracy  Float?   // Price Action accuracy
  layer3Accuracy  Float?   // MTF accuracy
  layer4Accuracy  Float?   // Volatility accuracy
  layer5Accuracy  Float?   // Writer Ratio accuracy
  layer6Accuracy  Float?   // Risk Filter accuracy
  layer7Accuracy  Float?   // Portfolio Management accuracy

  // Status
  status          String   @default("completed") // running, completed, failed

  // Timestamps
  createdAt       DateTime @default(now())
  completedAt     DateTime?

  @@index([organizationId, userId])
  @@index([symbol])
  @@index([createdAt])
  @@map("backtest_results")
}

// Writer Ratio Snapshots (Historical Option Chain Data)
model WriterRatioSnapshot {
  id              String   @id @default(cuid())

  // Instrument Details
  symbol          String   // NIFTY, BANKNIFTY
  expiry          DateTime
  strike          Float

  // Option Chain Data
  callOI          Int      // Call Open Interest
  putOI           Int      // Put Open Interest
  callOIChange    Int      @default(0)
  putOIChange     Int      @default(0)

  // Writer Positions
  callWriters     Int      // Estimated CALL writers (from OI build-up)
  putWriters      Int      // Estimated PUT writers (from OI build-up)

  // Critical Ratio
  writerRatio     Float    // PUT writers / CALL writers (for bullish) or vice versa
  ratioPassed     Boolean  // TRUE if ratio >= 2.5x threshold

  // Price Data
  callLTP         Float?   // Call Last Traded Price
  putLTP          Float?   // Put Last Traded Price
  callIV          Float?   // Call Implied Volatility
  putIV           Float?   // Put Implied Volatility

  // Volume Data
  callVolume      Int      @default(0)
  putVolume       Int      @default(0)

  // Market Metrics
  pcr             Float?   // Put-Call Ratio (OI based)
  vixLevel        Float?   // VIX at snapshot time
  spotPrice       Float?   // Underlying spot price

  // Metadata
  dataSource      String   @default("zerodha") // zerodha, nse, custom

  // Timestamp
  timestamp       DateTime @default(now())

  @@index([symbol, expiry, strike])
  @@index([timestamp])
  @@index([ratioPassed])
  @@map("writer_ratio_snapshots")
}

// Option Chain Data (Real-time)
model OptionChainData {
  id              String   @id @default(cuid())

  // Instrument
  symbol          String   // NIFTY, BANKNIFTY
  expiry          DateTime
  strike          Float

  // Call Option Data
  callLTP         Float?
  callOI          Int      @default(0)
  callOIChange    Int      @default(0)
  callVolume      Int      @default(0)
  callIV          Float?
  callBidQty      Int      @default(0)
  callAskQty      Int      @default(0)
  callBidPrice    Float?
  callAskPrice    Float?

  // Put Option Data
  putLTP          Float?
  putOI           Int      @default(0)
  putOIChange     Int      @default(0)
  putVolume       Int      @default(0)
  putIV           Float?
  putBidQty       Int      @default(0)
  putAskQty       Int      @default(0)
  putBidPrice     Float?
  putAskPrice     Float?

  // Underlying
  spotPrice       Float?

  // Metrics
  pcr             Float?   // Put-Call Ratio

  // Timestamp
  timestamp       DateTime @default(now())

  @@index([symbol, expiry])
  @@index([timestamp])
  @@map("option_chain_data")
}

// Market Regime Analysis
model MarketRegime {
  id              String   @id @default(cuid())
  organizationId  String

  // Market Details
  symbol          String   // NIFTY, BANKNIFTY

  // Regime Classification
  regimeType      RegimeType // TRENDING_BULLISH, TRENDING_BEARISH, RANGING, VOLATILE
  regimeStrength  Float    @default(0) // 0-100

  // Market Indicators
  vixLevel        Float
  vixCategory     String   // LOW, MEDIUM, HIGH, EXTREME

  // Trend Analysis
  trendDirection  String?  // UP, DOWN, SIDEWAYS
  trendStrength   Float?   // 0-100

  // Volatility Metrics
  historicalVol   Float?   // Historical volatility
  impliedVol      Float?   // Average implied volatility
  volPercentile   Float?   // Volatility percentile (0-100)

  // Price Action
  priceLevel      Float?   // Current spot price
  keyLevels       Json?    // Support/Resistance levels

  // Sentiment
  marketSentiment String?  // BULLISH, BEARISH, NEUTRAL
  sentimentScore  Float?   // -100 to +100

  // Technical Indicators
  indicators      Json?    // RSI, MACD, ADX, etc.

  // Timestamp
  timestamp       DateTime @default(now())
  validUntil      DateTime? // Regime validity period

  @@index([organizationId, symbol])
  @@index([timestamp])
  @@index([regimeType])
  @@map("market_regimes")
}

// ==================== TRADING ENUMS ====================

enum OptionType {
  CE  // Call Option
  PE  // Put Option
}

enum SignalType {
  BUY_CALL
  BUY_PUT
  SELL_CALL
  SELL_PUT
  HOLD
  EXIT
  NO_TRADE
}

enum PositionType {
  LONG_CALL
  LONG_PUT
  SHORT_CALL
  SHORT_PUT
  LONG_STRADDLE
  LONG_STRANGLE
  SHORT_STRADDLE
  SHORT_STRANGLE
}

enum SignalStatus {
  PENDING       // Signal generated, awaiting validation
  APPROVED      // All layers passed including writer ratio
  REJECTED      // Failed one or more layers
  EXECUTED      // Trade executed
  CANCELLED     // Signal cancelled
  EXPIRED       // Signal validity expired
}

enum PositionStatus {
  OPEN          // Position is active
  CLOSED        // Position closed normally
  STOPPED_OUT   // Hit stop loss
  TARGET_HIT    // Hit target
  EXPIRED       // Option expired
  CANCELLED     // Manually cancelled
}

enum TradeResult {
  WIN           // Profitable trade
  LOSS          // Loss-making trade
  BREAKEVEN     // Neutral trade
}

enum RegimeType {
  TRENDING_BULLISH
  TRENDING_BEARISH
  RANGING
  VOLATILE
  UNCERTAIN
}
