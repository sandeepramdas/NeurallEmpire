// ==================== ENHANCED NEURALLEMPIRE SCHEMA ====================
// Version 2.1 - Complete Schema with OAuth, Subdomain Management & Enterprise Features
// This is the complete schema with all required tables for subdomain-based SaaS

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== PLATFORM ADMINISTRATION ====================

model PlatformAdmin {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  role         AdminRole @default(SUPPORT)
  permissions  Json      // Granular permissions

  // Security
  mfaEnabled   Boolean   @default(true)
  mfaSecret    String?
  lastLoginAt  DateTime?
  lastLoginIp  String?

  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  auditLogs    AuditLog[]
  adminActions AdminAction[]

  @@map("platform_admins")
}

model AdminAction {
  id          String    @id @default(cuid())
  adminId     String
  action      String    // e.g., "DEACTIVATE_ORG", "MODIFY_SUBSCRIPTION"
  targetType  String    // "ORGANIZATION", "USER", "AGENT"
  targetId    String
  reason      String?
  metadata    Json?     // Additional action details

  admin       PlatformAdmin @relation(fields: [adminId], references: [id])
  createdAt   DateTime @default(now())

  @@index([targetType, targetId])
  @@map("admin_actions")
}

// ==================== ENHANCED ORGANIZATION MANAGEMENT ====================

model Organization {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  domain           String?      @unique
  logo             String?
  description      String?
  industry         String?      // Industry vertical
  size             String?      // Company size

  // Enhanced Status Management
  status           OrgStatus    @default(TRIAL)
  statusReason     String?      // Why status changed
  statusChangedAt  DateTime     @default(now())
  statusChangedBy  String?      // Admin who changed it

  // üöÄ SUBDOMAIN MANAGEMENT (NEW)
  subdomainEnabled Boolean      @default(true)
  subdomainStatus  SubdomainStatus @default(PENDING)
  subdomainVerifiedAt DateTime?
  customDomain     String?      @unique // Custom domain like acme.com
  customDomainVerified Boolean  @default(false)
  sslCertificateStatus SSLStatus @default(PENDING)
  sslCertificateExpiry DateTime?

  // Subscription & Billing
  planType         PlanType     @default(TRIAL)
  billingCycle     BillingCycle @default(MONTHLY)
  subscriptionId   String?      @unique
  billingEmail     String?

  // Trial Management
  trialEndsAt      DateTime?
  trialExtended    Boolean      @default(false)

  // Resource Limits (Plan-based)
  maxUsers         Int          @default(5)
  maxAgents        Int          @default(10)
  maxWorkflows     Int          @default(20)
  maxApiCalls      Int          @default(10000)
  storageLimit     BigInt       @default(5368709120) // 5GB in bytes

  // Usage Tracking
  currentUsers     Int          @default(0)
  currentAgents    Int          @default(0)
  currentWorkflows Int          @default(0)
  apiCallsThisMonth Int         @default(0)
  storageUsed      BigInt       @default(0)

  // üîê ENHANCED SECURITY & SSO (NEW)
  ssoEnabled       Boolean      @default(false)
  ssoProvider      SSOProvider?
  ssoConfig        Json?
  samlMetadata     String?      // SAML metadata for enterprise SSO
  allowedDomains   String[]     @default([]) // Email domains allowed to auto-join

  // Compliance & Security
  dataRetention    Int          @default(90) // days
  ipWhitelist      String[]     @default([])

  // üöÄ ONBOARDING & SETUP (NEW)
  onboardingCompleted Boolean   @default(false)
  onboardingStep   Int          @default(0)
  setupWizardCompleted Boolean  @default(false)
  firstAgentCreated Boolean     @default(false)

  // Metadata
  verifiedAt       DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?    // Soft delete

  // Relations
  users            User[]
  agents           Agent[]
  workflows        AgentWorkflow[]
  workflowTemplates WorkflowTemplate[]
  interactions     AgentInteraction[]
  subscriptions    Subscription[]
  invoices         Invoice[]
  apiKeys          ApiKey[]
  webhooks         Webhook[]
  auditLogs        AuditLog[]
  agentTemplates   AgentTemplate[]
  usageMetrics     UsageMetric[]
  notifications    Notification[]

  // üöÄ NEW RELATIONS
  subdomainRecords SubdomainRecord[]
  oauthConfigs     OAuthConfig[]
  socialAccounts   SocialAccount[]
  agentSwarms      AgentSwarm[]

  @@index([status])
  @@index([planType])
  @@index([slug])
  @@index([subdomainStatus])
  @@map("organizations")
}

// ==================== üöÄ NEW: SUBDOMAIN MANAGEMENT ====================

model SubdomainRecord {
  id              String   @id @default(cuid())
  organizationId  String

  // DNS Configuration
  subdomain       String   @unique // e.g., "acme" for acme.neurallempire.com
  fullDomain      String   @unique // e.g., "acme.neurallempire.com"
  recordType      String   @default("CNAME") // DNS record type
  recordValue     String   // Points to main domain

  // Status & Health
  status          SubdomainStatus @default(PENDING)
  isActive        Boolean  @default(true)

  // DNS Provider Info
  dnsProvider     String   @default("cloudflare")
  externalRecordId String? // Provider-specific record ID

  // SSL/TLS
  sslEnabled      Boolean  @default(true)
  sslProvider     String   @default("cloudflare")
  sslCertId       String?

  // Monitoring
  lastHealthCheck DateTime?
  healthStatus    HealthStatus @default(UNKNOWN)
  uptime          Float    @default(100.0) // Percentage
  responseTime    Int?     // Average response time in ms

  // Metadata
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([subdomain])
  @@index([status])
  @@index([organizationId])
  @@map("subdomain_records")
}

// ==================== üîê ENHANCED USER & OAUTH AUTHENTICATION ====================

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  passwordHash   String?  // Optional for OAuth-only users
  firstName      String?
  lastName       String?
  avatar         String?
  phone          String?
  timezone       String   @default("UTC")

  // Organization & Role
  organizationId String
  role           UserRole @default(MEMBER)
  department     String?
  title          String?

  // Permissions
  permissions    Json?    // Override permissions
  canCreateAgents Boolean @default(true)
  canManageWorkflows Boolean @default(true)
  canViewAnalytics Boolean @default(true)

  // Status & Security
  status         UserStatus @default(PENDING)
  statusReason   String?
  emailVerified  Boolean    @default(false)
  phoneVerified  Boolean    @default(false)
  mfaEnabled     Boolean    @default(false)
  mfaSecret      String?

  // Activity
  lastLoginAt    DateTime?
  lastLoginIp    String?
  loginCount     Int       @default(0)
  lastLoginMethod LoginMethod? // PASSWORD, GOOGLE, GITHUB, etc.

  // üöÄ ONBOARDING & PREFERENCES (NEW)
  onboardingStep Int       @default(0)
  onboardingCompleted Boolean @default(false)
  preferences    Json?     // UI preferences, settings
  locale         String    @default("en")

  // Security
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  backupCodes    String[] @default([])

  // Metadata
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime? // Soft delete

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sessions       Session[]
  socialAccounts SocialAccount[]
  createdAgents  Agent[]      @relation("AgentCreator")
  ownedAgents    Agent[]      @relation("AgentOwner")
  workflows      AgentWorkflow[] @relation("WorkflowCreator")
  auditLogs      AuditLog[]
  notifications  Notification[]
  createdSwarms  AgentSwarm[]

  @@index([organizationId, status])
  @@index([email])
  @@index([lastLoginAt])
  @@map("users")
}

// ==================== üöÄ NEW: SOCIAL/OAUTH ACCOUNT MANAGEMENT ====================

model SocialAccount {
  id              String   @id @default(cuid())
  userId          String
  organizationId  String

  // Provider Info
  provider        OAuthProvider // GOOGLE, GITHUB, LINKEDIN, MICROSOFT
  providerId      String   // User ID from the provider
  providerEmail   String?  // Email from provider
  providerUsername String? // Username from provider

  // OAuth Data
  accessToken     String?  // Current access token
  refreshToken    String?  // Refresh token
  tokenType       String   @default("Bearer")
  expiresAt       DateTime?
  scope           String[] @default([])

  // Account Info
  displayName     String?
  profileUrl      String?
  avatarUrl       String?

  // Metadata from Provider
  providerData    Json?    // Raw data from provider

  // Status
  isActive        Boolean  @default(true)
  isPrimary       Boolean  @default(false) // Primary OAuth account
  lastUsedAt      DateTime?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider]) // One account per provider per user
  @@index([userId])
  @@index([provider])
  @@index([organizationId])
  @@map("social_accounts")
}

// ==================== üöÄ NEW: OAUTH CONFIGURATION ====================

model OAuthConfig {
  id              String   @id @default(cuid())
  organizationId  String

  // Provider Configuration
  provider        OAuthProvider
  clientId        String
  clientSecret    String   // Encrypted

  // Configuration
  enabled         Boolean  @default(true)
  allowedDomains  String[] @default([]) // Restrict OAuth to specific domains
  autoCreateUsers Boolean  @default(true)
  autoJoinOrg     Boolean  @default(false)
  defaultRole     UserRole @default(MEMBER)

  // Customization
  buttonText      String?  // Custom button text
  buttonColor     String?  // Custom button color
  logoUrl         String?  // Custom provider logo

  // Advanced Settings
  scope           String[] @default([])
  additionalParams Json?   // Additional OAuth params

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, provider])
  @@index([organizationId])
  @@map("oauth_configs")
}

// ==================== üöÄ ENHANCED SESSION MANAGEMENT ====================

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique @default(cuid())

  // üöÄ ENHANCED SESSION DETAILS (NEW)
  sessionType SessionType @default(WEB) // WEB, MOBILE, API
  loginMethod LoginMethod? // How user logged in

  // Device & Location
  userAgent String?
  ipAddress String?
  device    String? // Parsed device info
  browser   String? // Parsed browser info
  os        String? // Parsed OS info
  location  Json?   // Geo location data

  // üöÄ SUBDOMAIN SUPPORT (NEW)
  subdomain String? // Which subdomain this session is for
  originUrl String? // Original URL that created session

  // Security
  isActive  Boolean @default(true)
  isSuspicious Boolean @default(false)
  riskScore Float?  // Risk assessment score

  // Session Management
  expiresAt DateTime
  lastAccessedAt DateTime @default(now())
  refreshedAt DateTime @default(now())

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([subdomain])
  @@index([isActive])
  @@index([expiresAt])
  @@map("sessions")
}

// ==================== AGENT MANAGEMENT ====================

model Agent {
  id              String   @id @default(cuid())
  organizationId  String
  creatorId       String
  ownerId         String

  // Basic Info
  name            String
  type            AgentType @default(CUSTOM)
  description     String?
  avatar          String?
  category        String?
  status          AgentStatus @default(DRAFT)

  // üß† AI Configuration
  model           String   @default("gpt-4")
  systemPrompt    String
  temperature     Float    @default(0.7)
  maxTokens       Int      @default(4000)
  topP            Float    @default(1.0)
  frequencyPenalty Float   @default(0.0)
  presencePenalty Float    @default(0.0)

  // üîß Capabilities
  capabilities    String[] @default([])
  tools           Json?    // Available tools
  integrations    Json?    // External integrations

  // üí∞ Monetization
  pricing         Json?    // Pricing configuration
  isPublic        Boolean  @default(false)
  isMarketplace   Boolean  @default(false)

  // üìä Performance
  usageCount      Int      @default(0)
  successRate     Float    @default(100.0)
  avgResponseTime Float    @default(0)
  rating          Float    @default(0)
  reviewCount     Int      @default(0)

  // üè∑Ô∏è Metadata
  tags            String[] @default([])
  version         String   @default("1.0.0")
  isActive        Boolean  @default(true)

  // Timestamps
  lastUsedAt      DateTime?
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User @relation("AgentCreator", fields: [creatorId], references: [id])
  owner           User @relation("AgentOwner", fields: [ownerId], references: [id])
  interactions    AgentInteraction[]
  workflows       AgentWorkflow[]
  templates       AgentTemplate[]
  swarmMembers    SwarmMember[]

  @@index([organizationId, status])
  @@index([isPublic, category])
  @@index([creatorId])
  @@map("agents")
}

// ==================== AGENT INTERACTIONS ====================

model AgentInteraction {
  id             String   @id @default(cuid())
  organizationId String
  agentId        String
  sessionId      String?  // Optional session tracking
  userId         String?  // User who triggered this

  // Interaction Details
  type           InteractionType @default(CHAT)
  input          Json
  output         Json?
  context        Json?

  // Performance Metrics
  tokens         Json?    // Token usage
  latency        Int?     // Response time in ms
  cost           Float?   // Estimated cost

  // Status & Error
  status         InteractionStatus @default(PENDING)
  errorMessage   String?
  retryCount     Int      @default(0)

  // Metadata
  userAgent      String?
  ipAddress      String?
  metadata       Json?

  // Timestamps
  startedAt      DateTime @default(now())
  completedAt    DateTime?

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent          Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([organizationId, agentId])
  @@index([startedAt])
  @@index([status])
  @@map("agent_interactions")
}

// ==================== WORKFLOW MANAGEMENT ====================

model AgentWorkflow {
  id              String   @id @default(cuid())
  organizationId  String
  creatorId       String

  // Basic Info
  name            String
  description     String?
  category        String?
  status          WorkflowStatus @default(DRAFT)

  // Workflow Definition
  definition      Json     // Workflow graph/nodes
  version         String   @default("1.0.0")

  // Execution Settings
  triggerType     TriggerType @default(MANUAL)
  triggerConfig   Json?    // Trigger configuration
  schedule        String?  // Cron schedule for scheduled workflows

  // Performance
  executionCount  Int      @default(0)
  successRate     Float    @default(100.0)
  avgDuration     Int      @default(0) // milliseconds

  // Publishing
  isPublic        Boolean  @default(false)
  tags            String[] @default([])

  // Timestamps
  lastExecutedAt  DateTime?
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User @relation("WorkflowCreator", fields: [creatorId], references: [id])
  executions      WorkflowExecution[]
  agents          Agent[]
  templates       WorkflowTemplate[]

  @@index([organizationId, status])
  @@index([creatorId])
  @@map("agent_workflows")
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  workflowId  String
  triggeredBy String?  // User ID or system

  // Execution
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?     // milliseconds

  // Progress
  currentNode   String?  // Current node ID
  completedNodes String[] @default([])

  // Input/Output
  input         Json?
  output        Json?
  variables     Json?    // Runtime variables

  // Error
  error         String?
  failedNode    String?

  // Relations
  workflow      AgentWorkflow @relation(fields: [workflowId], references: [id])

  @@index([workflowId, status])
  @@map("workflow_executions")
}

// ==================== TEMPLATES & MARKETPLACE ====================

model AgentTemplate {
  id              String   @id @default(cuid())
  agentId         String?
  organizationId  String

  // Template Info
  name            String
  category        String
  description     String
  icon            String?

  // Configuration Template
  configTemplate  Json     // Template configuration
  requirements    Json?    // Required fields

  // Marketplace
  isPublic        Boolean  @default(false)
  isCertified     Boolean  @default(false)
  price           Float    @default(0)

  // Usage
  installCount    Int      @default(0)
  rating          Float    @default(0)
  reviewCount     Int      @default(0)

  // Metadata
  tags            String[] @default([])
  version         String   @default("1.0.0")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  agent           Agent? @relation(fields: [agentId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@index([isPublic, category])
  @@map("agent_templates")
}

model WorkflowTemplate {
  id              String   @id @default(cuid())
  organizationId  String
  workflowId      String?

  // Template Info
  name            String
  category        String
  description     String

  // Template Data
  template        Json     // Workflow template

  // Marketplace
  isPublic        Boolean  @default(false)
  price           Float    @default(0)

  // Usage
  useCount        Int      @default(0)
  rating          Float    @default(0)

  // Metadata
  tags            String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  workflow        AgentWorkflow? @relation(fields: [workflowId], references: [id])

  @@map("workflow_templates")
}

// ==================== SUBSCRIPTION & BILLING ====================

model Subscription {
  id              String   @id @default(cuid())
  organizationId  String
  paymentGatewaySubscriptionId String @unique

  // Subscription Details
  status          SubscriptionStatus
  planType        PlanType
  billingCycle    BillingCycle
  currentPeriodStart DateTime
  currentPeriodEnd DateTime

  // Pricing
  amount          Float
  currency        String @default("USD")
  taxAmount       Float?

  // Usage Limits
  userLimit       Int
  agentLimit      Int
  workflowLimit   Int
  apiCallLimit    Int

  // Status
  cancelAtPeriodEnd Boolean @default(false)
  canceledAt      DateTime?
  trialEnd        DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  invoices        Invoice[]

  @@map("subscriptions")
}

model Invoice {
  id              String   @id @default(cuid())
  organizationId  String
  subscriptionId  String?

  // Invoice Details
  invoiceNumber   String   @unique
  status          InvoiceStatus
  amount          Float
  currency        String   @default("USD")
  taxAmount       Float?
  totalAmount     Float

  // Billing
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?
  dueDate         DateTime
  paidAt          DateTime?

  // Payment Gateway Integration
  paymentGatewayInvoiceId String?  @unique
  paymentGatewayChargeId  String?
  paymentGateway          String   @default("razorpay") // razorpay, manual, etc.

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("invoices")
}

// ==================== API KEYS & WEBHOOKS ====================

model ApiKey {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  keyHash        String   @unique
  keyPreview     String   // First few chars for display

  // Permissions & Scope
  permissions    Json
  rateLimit      Int      @default(1000) // requests per hour
  ipWhitelist    String[] @default([])

  // Usage
  lastUsedAt     DateTime?
  usageCount     Int      @default(0)
  isActive       Boolean  @default(true)

  // Metadata
  expiresAt      DateTime?
  createdAt      DateTime @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("api_keys")
}

model Webhook {
  id             String   @id @default(cuid())
  organizationId String

  // Webhook Details
  name           String
  url            String
  events         String[] // Which events trigger this webhook
  secret         String?  // For signature verification

  // Status & Performance
  isActive       Boolean  @default(true)
  successCount   Int      @default(0)
  failureCount   Int      @default(0)
  lastTriggeredAt DateTime?
  lastStatus     Int?     // HTTP status code

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("webhooks")
}

// ==================== AUDIT & MONITORING ====================

model AuditLog {
  id             String   @id @default(cuid())
  organizationId String?
  userId         String?
  adminId        String?

  // Action Details
  action         String   // What happened
  resourceType   String   // What was affected
  resourceId     String?  // ID of affected resource
  oldValues      Json?    // Before state
  newValues      Json?    // After state

  // Context
  ipAddress      String?
  userAgent      String?
  metadata       Json?

  // Timestamp
  createdAt      DateTime @default(now())

  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User? @relation(fields: [userId], references: [id])
  admin          PlatformAdmin? @relation(fields: [adminId], references: [id])

  @@index([organizationId, action])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model UsageMetric {
  id             String   @id @default(cuid())
  organizationId String
  metricType     String   // "API_CALLS", "AGENT_EXECUTIONS", etc
  metricName     String
  value          Float
  unit           String   // "count", "bytes", "milliseconds"

  // Dimensions
  dimensions     Json?    // Additional metadata

  // Time
  recordedAt     DateTime @default(now())
  periodStart    DateTime
  periodEnd      DateTime

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId, metricType])
  @@index([recordedAt])
  @@map("usage_metrics")
}

model Notification {
  id             String   @id @default(cuid())
  organizationId String
  userId         String?  // Null for org-wide notifications

  // Notification Details
  type           NotificationType
  title          String
  message        String
  actionUrl      String?

  // Status
  isRead         Boolean  @default(false)
  readAt         DateTime?

  // Metadata
  metadata       Json?
  expiresAt      DateTime?
  createdAt      DateTime @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User? @relation(fields: [userId], references: [id])

  @@index([organizationId, userId, isRead])
  @@map("notifications")
}

// ==================== üöÄ NEW ENUMS ====================

enum SubdomainStatus {
  PENDING       // DNS not configured
  CONFIGURING   // DNS being set up
  ACTIVE        // Subdomain working
  FAILED        // Configuration failed
  SUSPENDED     // Temporarily disabled
  DELETED       // Marked for deletion
}

enum SSLStatus {
  PENDING       // Certificate not issued
  ACTIVE        // Certificate active
  EXPIRED       // Certificate expired
  FAILED        // Certificate failed
  RENEWING      // Certificate being renewed
}

enum HealthStatus {
  HEALTHY       // Everything working
  DEGRADED      // Some issues
  UNHEALTHY     // Major issues
  UNKNOWN       // Status unknown
}

enum OAuthProvider {
  GOOGLE
  GITHUB
  LINKEDIN
  MICROSOFT
  FACEBOOK
  TWITTER
  APPLE
  CUSTOM        // Custom OAuth provider
}

enum SSOProvider {
  GOOGLE_WORKSPACE
  MICROSOFT_365
  OKTA
  AUTH0
  SAML
  CUSTOM
}

enum SessionType {
  WEB
  MOBILE
  API
  ADMIN
  SYSTEM
}

enum LoginMethod {
  PASSWORD
  GOOGLE
  GITHUB
  LINKEDIN
  MICROSOFT
  FACEBOOK
  SSO
  API_KEY
  MAGIC_LINK
}

// ==================== EXISTING ENUMS ====================

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
  VIEWER
}

enum PlanType {
  TRIAL       // 14-day trial
  FREE        // Limited free tier
  STARTER     // $99/month
  GROWTH      // $299/month
  SCALE       // $999/month
  ENTERPRISE  // Custom pricing
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum OrgStatus {
  TRIAL
  ACTIVE
  SUSPENDED   // Admin suspended
  DELINQUENT  // Payment issues
  CANCELLED
  BANNED      // Policy violation
}

enum UserStatus {
  PENDING     // Awaiting email verification
  ACTIVE
  SUSPENDED   // By admin or org owner
  INACTIVE    // Self-deactivated
  LOCKED      // Too many failed logins
}

enum UserRole {
  OWNER
  ADMIN
  DEVELOPER
  ANALYST
  MEMBER
  VIEWER
}

enum AgentStatus {
  DRAFT
  TESTING
  READY
  ACTIVE
  PAUSED
  RUNNING
  ERROR
  MAINTENANCE
  DEPRECATED
  ARCHIVED
  DELETED
}

enum InteractionType {
  CHAT
  COMPLETION
  FUNCTION_CALL
  WORKFLOW
}

enum InteractionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum TriggerType {
  MANUAL
  SCHEDULED
  WEBHOOK
  EVENT
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
  TRIALING
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  BILLING
  SYSTEM
}

enum AgentType {
  // Elite Eight Agent Types
  LEAD_GENERATOR
  EMAIL_MARKETER      // Note: Using EMAIL_MARKETER for consistency with code
  SOCIAL_MEDIA
  CONTENT_CREATOR
  ANALYTICS
  CUSTOMER_SERVICE
  SALES
  SEO_OPTIMIZER

  // Additional Agent Types
  CONVERSATIONAL
  TASK_AUTOMATION
  DATA_PROCESSOR
  INTEGRATION
  EMAIL_MARKETING     // Note: Alternative naming
  WORKFLOW_AUTOMATION
  DATA_PROCESSING
  INTEGRATION_AGENT
  MONITORING_AGENT
  RESEARCH_AGENT
  CUSTOM
}

enum SwarmType {
  SEQUENTIAL      // Agents execute one after another
  PARALLEL        // Agents execute simultaneously
  HIERARCHICAL    // Manager-worker relationship
  COLLABORATIVE   // Agents share data and coordinate
}

enum SwarmRole {
  LEADER          // Coordinates other agents
  WORKER          // Executes specific tasks
  COORDINATOR     // Manages workflow
  SPECIALIST      // Performs specialized tasks
}

// ==================== SWARM MODELS ====================

model AgentSwarm {
  id              String   @id @default(cuid())
  organizationId  String
  creatorId       String

  // Basic Info
  name            String
  description     String?
  type            SwarmType @default(SEQUENTIAL)
  status          AgentStatus @default(DRAFT)

  // Configuration
  configuration   Json?    // Swarm-specific configuration
  executionOrder  Json?    // Execution sequence for sequential swarms

  // Members
  members         SwarmMember[]

  // Performance
  executionCount  Int      @default(0)
  successRate     Float    @default(100.0)
  avgDuration     Int      @default(0) // milliseconds

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastExecutedAt  DateTime?

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User         @relation(fields: [creatorId], references: [id])

  @@map("agent_swarms")
}

model SwarmMember {
  id              String   @id @default(cuid())
  swarmId         String
  agentId         String

  // Member Configuration
  role            SwarmRole @default(WORKER)
  order           Int       @default(0) // Execution order within swarm
  isRequired      Boolean   @default(true)

  // Configuration
  configuration   Json?     // Member-specific configuration

  // Performance
  executionCount  Int       @default(0)
  successCount    Int       @default(0)
  errorCount      Int       @default(0)
  avgDuration     Int       @default(0) // milliseconds

  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastExecutedAt  DateTime?

  // Relations
  swarm           AgentSwarm @relation(fields: [swarmId], references: [id], onDelete: Cascade)
  agent           Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([swarmId, agentId])
  @@map("swarm_members")
}